#!/bin/bash -l
#PBS -l nodes=1:ppn=2
#PBS -M maxim.voronkov@csiro.au
#PBS -N ptflux
#PBS -l walltime=48:00:00
#PBS -m bea
#PBS -j oe
#PBS -r n

#export ASKAP_ROOT=/work0/vor010/ASKAPsoft
export ASKAP_ROOT=/DATA/DELPHINUS_1/vor010/giant/ASKAPsoft
#export AIPSPATH=$ASKAP_ROOT/Code/Components/Synthesis/testdata/current
export AIPSPATH=/opt/casapy-32.0.15111-002-64b/

simulator=$ASKAP_ROOT/Code/Components/Synthesis/synthesis/current/install/bin/csimulator.sh
imager=$ASKAP_ROOT/Code/Components/Synthesis/synthesis/current/install/bin/cimager.sh
imgstat=$ASKAP_ROOT/Code/Components/Synthesis/synthesis/current/install/bin/imgstat.sh

npix=2048
maxsupport=4096
cell=4arcsec
os=16
rob=0.0
snwplanes=33
inwplanes=33
noise=1.53e-2
ctol=0.03
nfeeds=1
dosim=true
donoise=true
doclean=true
freqdep=true
gridder=AWProject
#gridder=WProject
illum=disk


resultdir=${PBS_O_WORKDIR}/ptflux
mkdir ${resultdir}
cp $0 ${resultdir}
cd ${resultdir}
touch `date +%F.%H.%M.%S`
rm -f stats.log


configdir=${ASKAP_ROOT}/Code/Components/Synthesis/synthesis/current/apps/definitions

#for df in 1250
for df in 1250 1251 1252 1253 1254 1255 1256 1257 1257.25 1257.5 1257.75 1258 1258.25 1258.5 1258.75 1259 1260 1261 1262 1263 1264 1265
do

csimparset=csimulator-${df}.in
csimlog=csimulator-${df}.log
#mssub=ptflux-${df}.ms
mssub=ptflux.ms

cat > $csimparset <<EOF
Csimulator.dataset                              =       $mssub
#

Csimulator.sources.names                        =       [src]
Csimulator.sources.src.direction        =       [12h30m00.000, -45.00.00.000, J2000]
#Csimulator.sources.src.model             =       [/DATA/DELPHINUS_1/vor010/giant/ASKAPsoft/Code/Components/Synthesis/synthesis/current/apps/research/ptsrcmodel.img]
Csimulator.sources.src.components             =       [src1]
Csimulator.sources.src1.flux.i                  = 1.0
Csimulator.sources.src1.direction.dec          = 0.00387850580564
#Csimulator.sources.src1.direction.dec          = 0.0
Csimulator.sources.src1.direction.ra           = 0.0


# Define the antenna locations, feed locations, and spectral window definitions
Csimulator.antennas.definition                  =       $configdir/A27CR3.in
Csimulator.feeds.definition                     =       $configdir/ASKAP${nfeeds}feeds.in

Csimulator.spws.names=[Spectral0]
#Csimulator.spws.Spectral0  =[ 1, 1250.000000MHz, -2.533333MHz, "XX XY YX YY"]
#Csimulator.spws.Spectral0  =[ 1, ${df}MHz, -2.533333MHz, "XX XY YX YY"]
Csimulator.spws.Spectral0  =[ 1, ${df}MHz, -2.533333MHz, "XX YY"]

# Standard settings for the simulation step
Csimulator.simulation.blockage                  =       0.01
Csimulator.simulation.elevationlimit            =       8deg
Csimulator.simulation.autocorrwt                =       0.0
Csimulator.simulation.usehourangles             =       True
Csimulator.simulation.referencetime             =       [2007Mar07, UTC]
Csimulator.simulation.integrationtime           =       200s
#
# Observe source SKADS_S3SEX for 8 hrs with a single channel spectral window, rotating between fields
Csimulator.observe.number                       =       11
Csimulator.observe.scan0                        =       [src, Spectral0, -5.0416667h, -4.9583333h]
Csimulator.observe.scan1                        =       [src, Spectral0, -4.0416667h, -3.9583333h]
Csimulator.observe.scan2                        =       [src, Spectral0, -3.0416667h, -2.9583333h]
Csimulator.observe.scan3                        =       [src, Spectral0, -2.0416667h, -1.9583333h]
Csimulator.observe.scan4                        =       [src, Spectral0, -1.0416667h, -0.9583333h]
Csimulator.observe.scan5                        =       [src, Spectral0, -0.0416667h, 0.0416667h]
Csimulator.observe.scan6                        =       [src, Spectral0, 0.9583333h, 1.0416667h]
Csimulator.observe.scan7                        =       [src, Spectral0, 1.9583333h, 2.0416667h]
Csimulator.observe.scan8                        =       [src, Spectral0, 2.9583333h, 3.0416667h]
Csimulator.observe.scan9                        =       [src, Spectral0, 3.9583333h, 4.0416667h]
Csimulator.observe.scan10                       =       [src, Spectral0, 4.9583333h, 5.0416667h]

#
# Use a gridder to apply primary beam during the W projection step.
Csimulator.gridder                                      = ${gridder}
Csimulator.gridder.${gridder}.wmax               = 10000
Csimulator.gridder.${gridder}.nwplanes           = $snwplanes
Csimulator.gridder.${gridder}.oversample         = ${os}
Csimulator.gridder.${gridder}.diameter           = 12m
Csimulator.gridder.${gridder}.blockage           = 2m
Csimulator.gridder.${gridder}.maxfeeds           = ${nfeeds}
Csimulator.gridder.${gridder}.maxsupport         = ${maxsupport}
Csimulator.gridder.${gridder}.frequencydependent    = ${freqdep}
Csimulator.gridder.${gridder}.variablesupport = true 
Csimulator.gridder.${gridder}.offsetsupport = true 
Csimulator.gridder.${gridder}.illumination.tapering.defocusing = 0rad
Csimulator.gridder.${gridder}.illumination	      = ${illum}
Csimulator.gridder.${gridder}.patolerance	= 10.0
#
# optional corruption due to calibration effect
Csimulator.corrupt                              = false
Csimulator.corrupt.gainsfile                    = rndgains.in
# optional noise addition
Csimulator.noise                                = ${donoise}
Csimulator.noise.variance                       = ${noise}
Csimulator.noise.seed1                       = time
Csimulator.noise.seed2                       = 1
#
EOF

if ${dosim}
then
    echo BEGIN SIMULATOR `date` from job $PBS_JOBID | tee $csimlog
    echo COMMAND = "mpirun -mca mpi_paffinity_alone 1  $simulator -inputs $csimparset | tee -a $csimlog"
    mpirun -mca mpi_paffinity_alone 1  $simulator -inputs $csimparset | tee -a $csimlog
    echo END SIMULATOR `date` | tee -a $csimlog
fi

#for df in 1 
#for df in 1 10 20 30 40 50 60 70 80 90 100
#do

image=image.ptflux${df}
cleanim=${image}

cimparsetC=cimager-clean-${df}.in
cimlogC=cimager-clean-${df}.log

cat > $cimparsetC <<EOF
Cimager.dataset  = ${mssub}
#
Cimager.Images.Names                            = [${cleanim}]
Cimager.Images.${cleanim}.frequency    = [1.121e9,1.421e9]
Cimager.Images.${cleanim}.nchan        = 1
Cimager.Images.${cleanim}.direction    = [12h30m00.000, -45.00.00.000, J2000]
Cimager.Images.shape                            = [${npix}, ${npix}]
Cimager.Images.cellsize                         = [${cell}, ${cell}]
Cimager.Images.reuse                            = false
Cimager.Images.writeAtMajorCycle                = false
#
Cimager.gridder                              = ${gridder}
Cimager.gridder.${gridder}.wmax               = 10000
Cimager.gridder.${gridder}.nwplanes           = $inwplanes
Cimager.gridder.${gridder}.oversample         = ${os}
Cimager.gridder.${gridder}.diameter           = 12m
#Cimager.gridder.${gridder}.illumination.tapering.defocusing = ${df}
Cimager.gridder.${gridder}.illumination.tapering.defocusing = 0
Cimager.gridder.${gridder}.illumination	      = ${illum}
Cimager.gridder.${gridder}.blockage           = 2m
Cimager.gridder.${gridder}.maxfeeds           = ${nfeeds}
Cimager.gridder.${gridder}.maxsupport         = ${maxsupport}
Cimager.gridder.${gridder}.frequencydependent = ${freqdep}
Cimager.gridder.${gridder}.variablesupport = true 
Cimager.gridder.${gridder}.offsetsupport = true 
Cimager.gridder.${gridder}.padding  = 1.2 
Cimager.gridder.${gridder}.oversampleweight  = false
Cimager.gridder.${gridder}.cutoff  = 0.03
#
#For the clean image
Cimager.solver                                  = Clean
Cimager.solver.Clean.algorithm                  = MultiScale
Cimager.solver.Clean.niter                      = 100
Cimager.solver.Clean.gain                       = 0.1
Cimager.solver.Clean.scales			= [0]
Cimager.solver.Clean.tolerance                  = ${ctol}
Cimager.solver.Clean.verbose                    = True
Cimager.threshold.minorcycle                    = [10%]
#Cimager.threshold.majorcycle                    = 1.0mJy
#Cimager.restore.equalise = True
#Cimager.ncycles                                 = ${df}
Cimager.ncycles                                 = 0

Cimager.solver.Clean.weightcutoff               = zero
#Cimager.solver.Clean.weightcutoff.clean         = false

#
Cimager.preconditioner.Names                    = [Robust, GaussianTaper]
Cimager.preconditioner.Robust.robustness	= ${rob}
Cimager.preconditioner.GaussianTaper            = [10arcsec,10arcsec,0deg]
#
Cimager.restore                                 = true
#Cimager.restore.beam                            = fit
Cimager.restore.beam                            = [10arcsec, 10arcsec, 0deg]
EOF

if ${doclean}
then
    echo BEGIN CLEAN IMAGER `date` from job $PBS_JOBID  | tee $cimlogC
    echo COMMAND = "mpirun -mca mpi_paffinity_alone 1  $imager -inputs $cimparsetC | tee -a $cimlogC"
    mpirun -mca mpi_paffinity_alone 1  $imager -inputs $cimparsetC | tee -a $cimlogC
    echo END CLEAN IMAGER `date` | tee -a $cimlogC
fi

echo ${df} >> stats.log
$imgstat ${cleanim}.restored | grep -v DEC >> stats.log

done
